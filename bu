class Model {
  constructor() {
    this.lvl = 1;
    this.playersData = SCORES || [];
    this.compliments = COMPLIMANTS;
    this.colors = COLOR_STACK_OPTIONS;
    this.titleColors = TITLE_COLORS;
    this.gameName = GAME_NAME;
    this.optionalAnswers = COLOR_STACK_OPTIONS[0];
  }
  ini() {
    app.initial_view();
    this.set_colored_title(this.gameName);
    app.restart_view();
    this.optional_colors();
  }
  change_optional_colors = () => {
    app.restart_view();
    let chosen = this.optionalAnswers;
    chosen =
      chosen === this.colors[0]
        ? this.colors[1]
        : chosen === this.colors[1]
        ? this.colors[2]
        : this.colors[2]
        ? this.colors[0]
        : chosen;

    this.optionalAnswers = chosen;
    this.optional_colors();
  };
  optional_colors = () => {
    for (this.optionalAnswer of this.optionalAnswers) {
      app.example_option(this.optionalAnswer);
    }
  };
  set_colored_title(text) {
    clearInterval(this.titleInterval);
    let colorTitle = () => {
      let coloredTitle = colorString(text, this.titleColors);
      app.control_title(coloredTitle);
    };
    colorTitle();
    this.titleInterval = setInterval(() => {
      colorTitle();
    }, 500);
  }

  validation(inputValue) {
    const isError = inputValidation(inputValue, this.playersData);
    !isError
      ? this.validation_sucsses(inputValue)
      : this.validation_fail(isError);
  }
  validation_fail(error) {
    app.err(error);
    setTimeout(() => {
      app.reverse_err();
    }, 1000);
  }
  validation_sucsses(inputValue) {
    this.playerName = inputValue;
    this.new_round();
  }
  random_compliment() {
    return this.compliments[randomInt(0, this.compliments.length - 1)];
  }
  new_round() {
    app.in_round(this.playerName);
    this.unsolvedItems = this.lvl;
    let roundCorrectAnswers = [];
    let lastAnswer;
    for (this.items = 0; this.items < this.lvl; this.items++) {
      let answers = this.optionalAnswers;
      console.log(this.optionalAnswers);
      let itemAnswer = answers[randomInt(0, answers.length - 1)];
      if (itemAnswer === lastAnswer) {
        this.items--;
      } else {
        roundCorrectAnswers.push(itemAnswer);
        app.animate(itemAnswer);
        lastAnswer = itemAnswer;
      }
    }
    console.log(roundCorrectAnswers);
    setTimeout(() => {
      this.build_item_options(roundCorrectAnswers);
    }, 5500);
  }

  check_item_answer(answerValue, item) {
    answerValue === true ? this.rightAnswer(item) : this.wrongAnswer();
  }
  rightAnswer(item) {
    app.solve(item, this.random_compliment());
    this.unsolvedItems--;
    if (this.unsolvedItems === 0) {
      this.won_round();
    }
  }
  won_round() {
    this.set_colored_title('WON LVL ' + this.lvl);
    this.lvl++;
    clearInterval(this.titleInterval);
    app.won(this.lvl, this.random_compliment(), this.playerName);
  }

  wrongAnswer() {
    clearInterval(this.titleInterval);
    this.playersData.push({ name: this.playerName, score: this.lvl });
    localStorage.setItem('scores', JSON.stringify(this.playersData));

    this.lvl = 1;
    this.playerName = undefined;
    for (let player of this.playersData) {
      app.player_score(player);
    }

    app.lost(this.scores);
  }
  build_item_options(roundCorrectAnswers) {
    for (this.item = 0; this.item < this.lvl; this.item++) {
      app.hide(this.item);
      for (this.optionalAnswer of this.optionalAnswers) {
        const isCorrect =
          this.optionalAnswer === roundCorrectAnswers[this.item] ? true : false;
        app.option(
          this.item,
          this.optionalAnswer,
          this.check_item_answer.bind(this, isCorrect, this.item)
        );
      }
    }
  }
}



initial_view

class View {
  welcome(justLost = true) {
    if (justLost) {
      scoresTable.style.display = 'none';
      scoresTable.innerHTML = '';
      modeCon.style.display = 'flex';
      inputCon.style.display = 'block';
      input.style.display = 'block';
    }
    mainCon.style.display = 'none';
    input.value = '';
    nextBtn.style.display = 'none';
    backBtn.style.display = 'none';
    startBtn.style.display = 'block';
    modeBtn.style.display = 'block';
    startBtn.textContent = 'Start here';
    modeBtn.textContent = 'Change mode';
  }
  game_title(titleText) {
    titleCon.innerHTML = titleText;
  }

  error(error) {
    startBtn.style.border = '4px solid tomato';
    startBtn.textContent = `${error}`;
    startBtn.style.fontSize = '140%';
    startBtn.style.fontWeight = 'bolder';
    startBtn.style.textTransform = 'uppercase';
    startBtn.style.color = 'tomato';

    inputLabel.style.color = 'tomato';
  }
  remove_error() {
    startBtn.style.fontWeight = '';
    startBtn.style.textTransform = 'lowercase';
    startBtn.style.border = 'none';
    startBtn.textContent = `start 
    game!`;
    startBtn.style.fontSize = '';
    startBtn.style.color = 'white';
    inputLabel.style.color = 'black';
  }

  in_round() {
    actionsCon.style.display = 'none';
    mainCon.style.display = 'flex';
  }
  won_round(nextLvl, complimant, playerName) {
    if (nextLvl === 2) {
      modeCon.style.display = 'none';
      inputCon.style.display = 'none';
    }
    titleCon.style.display = 'block';
    actionsCon.style.display = 'flex';
    subTitleCon.innerHTML = `${complimant},<br/> lets move on ${playerName}!`;
    //  titleCon.style.color = 'green';
    modeBtn.style.display = 'none';
    startBtn.style.display = 'none';
    nextBtn.style.display = 'block';
    nextBtn.textContent = `Go level ${nextLvl}`;

    mainCon.style.display = 'none';
    mainCon.innerHTML = ``;
  }
  lost_round() {
    subTitleCon.innerHTML = '';
    scoresTable.style.display = 'block';
    actionsCon.style.display = 'flex';
    inputCon.style.display = 'none';
    tabelName.textContent = 'name';
    tableRecored.textContent = 'score';
    btnsCon.style.display = 'flex';
    modeBtn.style.display = 'none';
    startBtn.style.display = 'none';
    backBtn.style.display = 'block';
    nextBtn.style.display = 'none';
    backBtn.textContent = `Play again! `;
    titleCon.innerHTML = `LOST ROUND `;
    titleCon.style.color = 'red';
    mainCon.innerHTML = '';
    mainCon.style.display = 'none';
    modeCon.style.display = 'none';
    actionsCon.appendChild(scoresTable);
  }
  animated_shape(backgroundColor) {
    let shape = document.createElement('div');
    shape.classList.add('section');
    let animation = document.createElement('div');
    animation.style.backgroundColor = backgroundColor;
    shape.appendChild(animation);
    mainCon.appendChild(shape);
    animation.classList.add('animated');
  }
  shape_option(shapeIdx, color, event) {
    const colorBtn = document.createElement('button');
    colorBtn.classList.add('answer-cube');
    colorBtn.style.backgroundColor = color;
    shapes[shapeIdx].appendChild(colorBtn);
    colorBtn.addEventListener('click', event);
  }
  example_shape_option(color) {
    const colorBtn = document.createElement('button');
    colorBtn.classList.add('answer-cube');
    colorBtn.style.backgroundColor = color;
    modeCon.appendChild(colorBtn);
  }
  clear_main() {
    modeCon.innerHTML = '';
  }
  hide_shape(shape) {
    let currentShape = shapes[shape];
    let animation = currentShape.getElementsByClassName('animated')[0];
    console.log(animation);
    animation.style.display = 'none';
  }
  solve_shape(shape, com) {
    shapes[shape].classList.add('solved');
    const complimant = document.createElement('div');
    complimant.className = 'sectionComplimant';

    complimant.textContent = com;
    shapes[shape].appendChild(complimant);
  }
  publish_player_score(player) {
    const score = document.createElement('li');
    const name = document.createElement('span');
    name.innerText = player.name;
    const recored = document.createElement('span');
    recored.innerText = player.score;
    score.append(name, recored);
    scoresTable.append(score);
  }
}

